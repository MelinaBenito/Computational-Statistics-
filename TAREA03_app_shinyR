# api_tb_morbilidad.R

library(shiny)

# Interfaz
ui <- fluidPage(
  titlePanel("ð Morbilidad por Tuberculosis en Profesionales de la Salud (2013â2021)"),
  
  sidebarLayout(
    sidebarPanel(
      h4("ð AnÃ¡lisis EstadÃ­stico AutomÃ¡tico"),
      p("Este sistema aplica automÃ¡ticamente prueba t o ANOVA con Tukey-Kramer segÃºn la cantidad de grupos."),
      br(),
      fileInput("file1", "Subir archivo CSV", accept = ".csv"), 
      actionButton("run_analysis", "Ejecutar AnÃ¡lisis")
    ),
    
    mainPanel(
      tabsetPanel(
        tabPanel("ð Datos", tableOutput("data_table")),
        tabPanel("ð Resultado EstadÃ­stico", tableOutput("stat_table")),
        tabPanel("ð§ª Tukey-Kramer", tableOutput("tukey_table")),
        tabPanel("ð GrÃ¡fico Comparativo", plotOutput("plot_output"))
      )
    )
  )
)

# LÃ³gica del servidor
server <- function(input, output) {
  
  datasetInput <- reactive({
    req(input$file1)
    read.csv(input$file1$datapath)
  })
  
  output$data_table <- renderTable({
    datasetInput()
  })
  
  observeEvent(input$run_analysis, {
    df <- datasetInput()
    
    # VerificaciÃ³n de columnas necesarias
    if (!("score" %in% colnames(df)) || !("group" %in% colnames(df))) {
      showModal(modalDialog(
        title = "Error",
        "El archivo cargado no contiene las columnas necesarias ('score' y 'group').",
        easyClose = TRUE,
        footer = NULL
      ))
      return(NULL)
    }
    
    n_groups <- length(unique(df$group))
    
    # Si hay dos grupos: prueba t
    if (n_groups == 2) {
      g_levels <- unique(df$group)
      t_test <- t.test(score ~ group, data = df)
      
      output$stat_table <- renderTable({
        data.frame(
          Grupo_1 = g_levels[1],
          Grupo_2 = g_levels[2],
          `Media 1` = round(mean(df$score[df$group == g_levels[1]]), 2),
          `Media 2` = round(mean(df$score[df$group == g_levels[2]]), 2),
          `Valor t` = round(t_test$statistic, 4),
          `Valor p` = round(t_test$p.value, 4),
          `Conf. Inferior` = round(t_test$conf.int[1], 4),
          `Conf. Superior` = round(t_test$conf.int[2], 4)
        )
      })
      
      output$tukey_table <- renderTable({
        data.frame(Mensaje = "No se aplica Tukey-Kramer con solo 2 grupos.")
      })
      
    } else if (n_groups > 2) {
      # Si hay mÃ¡s de 2 grupos: ANOVA y Tukey
      model <- aov(score ~ group, data = df)
      tukey <- TukeyHSD(model)
      
      output$stat_table <- renderTable({
        anova_summary <- summary(model)
        anova_df <- as.data.frame(anova_summary[[1]])
        anova_df <- cbind(Grupo = rownames(anova_df), anova_df)
        rownames(anova_df) <- NULL
        anova_df
      }, digits = 4)
      
      output$tukey_table <- renderTable({
        tukey_df <- as.data.frame(tukey$group)
        tukey_df$ComparaciÃ³n <- rownames(tukey_df)
        rownames(tukey_df) <- NULL
        tukey_df <- tukey_df[, c("ComparaciÃ³n", "diff", "lwr", "upr", "p adj")]
        names(tukey_df) <- c("ComparaciÃ³n", "Diferencia de Medias", "LÃ­mite Inferior", "LÃ­mite Superior", "Valor p Ajustado")
        tukey_df[order(tukey_df$`Valor p Ajustado`), ]
      }, digits = 4)
    }
    
    # GrÃ¡fico comparativo
    output$plot_output <- renderPlot({
      boxplot(score ~ group,
              data = df,
              col = rainbow(n_groups),
              main = "ð DistribuciÃ³n de Morbilidad por Grupo Profesional",
              xlab = "Grupo Profesional",
              ylab = "NÃºmero de Casos de Morbilidad")
    })
  })
}

# Ejecutar app
shinyApp(ui = ui, server = server)
